<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta http-equiv="X-UA-Compatible" content="IE=edge" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="../styles/style_showBucket.css" rel="stylesheet" />
  <title>Your Bucket Progress ðŸ˜‰</title>
</head>
<style>
  @import url("https://fonts.googleapis.com/css2?family=Open+Sans:wght@300;400;600;700&display=swap");
  @import url("https://fonts.googleapis.com/css2?family=Quicksand:wght@300;400;500;600;700&display=swap");
  @import url("https://fonts.googleapis.com/css2?family=SF+Pro+Display&display=swap");

  .wrapper {
    /* max-width: 375px; limit the maximum width */
    height: 100vh;
    width: 100%;
    background: #fffefe;
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
    /* border-radius: 30px; */
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    overflow: hidden;
    overflow-y: auto;
    scrollbar-width: none;
    /* Firefox */
    -ms-overflow-style: none;
    
  }

  .background-container {
    background-color: #ffffff;
    width: 100%;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: flex-start;
    position: relative;
    padding-top: 5vh;
    padding-bottom: 5px;
    box-sizing: border-box;
    border-radius: 0 20px 20px;
    /* height: 37vh; */
    box-shadow: 0px 4px 4px rgba(0, 0, 0, 0.25);
  }

  .arrow-left {
    position: absolute;
    top: 3vh;
    left: 3vh;
    cursor: pointer;
    background-color: transparent;
    border: none;
  }

  h1 {
    font-family: 'Quicksand', sans-serif;
    font-size: 2.5rem;
    font-weight: 600;
    color: #8083ff;
    margin-bottom: 0;
    text-align: center;
  }

  .Create-Goal {
    display: block;
    margin: auto;
    background: #8083ff;
    border-radius: 2.5vh;
    border: none;
    padding: 1vh 1vh;
    font-size: 1rem;
    cursor: pointer;
    width: 19.3vh;
    font-family: "Open sans", sans-serif;
    color: #ffffff;
    font-size: 2vh;
    position: relative;
    bottom: 0;
    transform: translateX(-0%);
    /* centering horizontally */
  }

/* 
  .input-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 80%;
  padding: 10px;
  margin: 2vh auto;
} */


.input-container {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 80vh;
  margin: auto;
}

input[name="taskEntry"] {
  flex-grow: 1;
  padding: 1vh;
  border: 1px solid #8083ff;
  border-radius: 2.5vh;
  font-family: "Open sans", sans-serif;
  font-size: 2vh;
}

button#addTask {
  margin-left: 1vh;
  padding: 1vh 2vh;
  border: none;
  border-radius: 2.5vh;
  background-color: #8083ff;
  color: #ffffff;
  font-family: "Open sans", sans-serif;
  font-size: 2vh;
  cursor: pointer;

}
  ul {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  width: 100%;
  padding: 0;
}



button#addTask {
  margin-left: 2vh;
}
button#completeBucketlist {
  display: block;
  margin: 2vh auto;
}
li {
  display: flex;
  justify-content: center;
  align-items: center;
  width: 80vh;
  padding: 1.4vh;
  list-style-type: none;
  text-align: center;
}

progress{
  width: 35vh;
}
</style>

<body>
  <div class="wrapper">
    <div class="background-container">
      <button class="arrow-left" onclick="goBack()" style="z-index: 10px;">
        <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 512 512" width="3vh" height="3vh">
          <path fill="#8083ff"
            d="M314.6,449.6L65.9,256l248.7-193.6c6.5-5.1,6.9-14.5,1.8-21s-14.5-6.9-21-1.8l-271.4,212c-3.7,2.9-5.7,7.4-5.7,12.1s2,9.2,5.7,12.1l271.4,212c2.8,2.2,6.2,3.3,9.6,3.3c3.4,0,6.7-1.1,9.6-3.3C321.1,464.1,321.1,454.7,314.6,449.6z" />
        </svg>
      </button>
      <h1>
        <%=bucketTitle%>
      </h1>
      <% if(tasks.Task.length==0){ %>
        <p>You currently don't have any milestone tasks. Do you want to add?</p>

        <% } else{ %>
          <progress id="progressbar" value="<%= numOfCompleted %>" max="<%= tasks.Task.length %>">
            32%
          </progress>
          <br />
          <br />
          <% } %>
        </div>
        
        <ul>
          <% tasks.Task.forEach(function(task) { %>
            <li>
              <label>
                <input <%=task.completed ? "checked='checked'" : null %> type="checkbox" name="milestoneTask" value="<%=
                task.id %>" />
                <%= task.message %>
              </label>
            </li>
            <% }) %>
          </ul>
          
        <div class="input-container">
          <input type="text" name="taskEntry" placeholder="Enter a task">
          <button id="addTask">Add</button>
        </div>
          
        <button id="completeBucketlist" class="Create-Goal">Complete Bucketlist</button>

        <!-- <button id="completeBucketlist" class="Create-Goal">Complete Bucketlist</button> -->

  </div>
</body>
<script>
function goBack() {
  window.history.back();
}

function addProgressBar() {
  const progressBar = document.getElementById("progressbar");
  progressBar.value++;
}

function completeProgressBar() {
  const progressBar = document.getElementById("progressbar");
  progressBar.value = 100;
}

function minusProgressBar() {
  const progressBar = document.getElementById("progressbar");
  progressBar.value--;
}

async function addTaskHandler() {
  try {
    const task = document.querySelector("input[name=taskEntry]").value;
    const pathArr = window.location.pathname.split("/");
    const path = pathArr[pathArr.length - 1];
    const res = await fetch("/feeds/addTask", {
      body: JSON.stringify({ task, path }),
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });
    const { success, taskId } = await res.json();
    if (success) {
      completeProgressBar();
      const taskList = document.querySelector("ul");
      taskList.innerHTML += `
        <li>
          <label>
            <input type="checkbox" name="milestoneTask" value="${taskId}" />
            ${task}
          </label>
        </li>
      `;
      addCheckboxListeners();
    }
    minusProgressBar();
  } catch (error) {
    console.log(error);
  }
}

document.querySelector("#addTask").addEventListener("click", addTaskHandler);
addCheckboxListeners();

function addCheckboxListeners() {
  const checkboxNodes = Array.from(
    document.querySelectorAll("input[name=milestoneTask]")
  );
  checkboxNodes.forEach(function (checkbox) {
    checkbox.addEventListener("change", async function (event) {
      try {
        const taskId = event.target.value;
        const completed = event.target.checked;
        const res = await fetch(`/feeds/updateTask/${taskId}`, {
          body: JSON.stringify({ completed }),
          method: "POST",
          headers: { "Content-Type": "application/json" },
        });
        addProgressBar();
      } catch (error) {
        console.log(error);
      }
    });
  });
}

async function completeBucketlist() {
  try {
    const urlArr = window.location.pathname.split("/");
    const bucket_id = urlArr[urlArr.length - 1];
    const res = await fetch("/feeds/bucket/:id", {
      body: JSON.stringify({ bucket_id }),
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });
    const { success } = await res.json();

    if (success) {
      completeProgressBar();
      const taskList = document.querySelector("ul");
      taskList.innerHTML = "Bucketlist Completed!";
    }
  } catch (error) {
    console.log(error);
  }
}

const completeBtn = document.querySelector("#completeBucketlist");
completeBtn.addEventListener("click", completeBucketlist);

    </script>
</html>